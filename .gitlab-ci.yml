image: docker:24.0.7  # Use a Docker image

variables:
  DOCKER_HOST: unix:///var/run/docker.sock  # Use socket mounting
  DOCKER_TLS_CERTDIR: ""  # Disable TLS to prevent authentication issues
  POSTGRES_DB: mydatabase
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password
  REDIS_HOST: redis
  DATABASE_URL: postgresql://user:password@db:5432/mydatabase
  COMPOSE_HTTP_TIMEOUT: 300  # Avoid timeout issues

stages:
  - build
  - test

before_script:
  - apk add --no-cache docker-compose  # Install docker-compose
  - docker --version  # Verify Docker installation
  - docker-compose --version  # Verify docker-compose installation
  - echo "Ensuring Docker is ready..."
  - sleep 5  # Give Docker time to initialize
  - docker info  # Debug Docker status

build_job:
  stage: build
  services:
    - name: docker:dind  # ✅ Enable Docker-in-Docker
      command: ["--tls=false"]
  script:
    - apk add --no-cache curl
    - echo "Checking out the repository..."
    - ls -la  # ✅ Debug: List all files to verify `compose.yml` is present
    - |
      if test -f compose.yml; then
        echo "compose.yml exists!";
      else
        echo "ERROR: compose.yml is missing!";
        exit 1;
      fi
    - echo "Removing networks from compose.yml for build..."
    - sed '/networks:/,/my_network/d' compose.yml > compose.build.yml  # ✅ Remove networks from a copy
    - echo "Building the Docker images..."
    - docker-compose -f compose.build.yml build --no-cache
  tags:
    - docker

unit_tests:
  stage: test
  image: python:3.9
  services:
    - redis:latest
    - postgres:latest
  before_script:
    - pip install -r requirements.txt
    - pip install pytest pytest-cov
  script:
    - pytest tests/unit_tests.py --cov=app --cov-report=xml --junitxml=unit_tests.xml > unit_tests.log
  artifacts:
    reports:
      junit: unit_tests.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - unit_tests.log

integration_tests:
  stage: test
  image: python:3.9
  services:
    - redis:latest
    - postgres:latest
  before_script:
    - pip install -r requirements.txt
    - pip install pytest
  script:
    - pytest tests/integration_tests.py --junitxml=integration_tests.xml > integration_tests.log
  artifacts:
    reports:
      junit: integration_tests.xml
    paths:
      - integration_tests.log

e2e_tests:
  stage: test
  image: python:3.9
  services:
    - redis:latest
    - postgres:latest
  before_script:
    - pip install -r requirements.txt
    - pip install pytest
  script:
    - pytest tests/e2e_tests.py --junitxml=e2e_tests.xml > e2e_tests.log
  artifacts:
    reports:
      junit: e2e_tests.xml
    paths:
      - e2e_tests.log

error_handling_tests:
  stage: test
  image: python:3.9
  services:
    - redis:latest
    - postgres:latest
  before_script:
    - pip install -r requirements.txt
    - pip install pytest
  script:
    - pytest tests/error_handling_tests.py --junitxml=error_handling_tests.xml > error_handling_tests.log
  artifacts:
    reports:
      junit: error_handling_tests.xml
    paths:
      - error_handling_tests.log

performance_tests:
  stage: test
  image: python:3.9
  services:
    - redis:latest
    - postgres:latest
  before_script:
    - pip install -r requirements.txt
    - pip install pytest
  script:
    - pytest tests/performance_tests.py --junitxml=performance_tests.xml > performance_tests.log
  artifacts:
    reports:
      junit: performance_tests.xml
    paths:
      - performance_tests.log

security_tests:
  stage: test
  image: python:3.9
  services:
    - redis:latest
    - postgres:latest
  before_script:
    - pip install -r requirements.txt
    - pip install pytest
  script:
    - pytest tests/security_tests.py --junitxml=security_tests.xml > security_tests.log
  artifacts:
    reports:
      junit: security_tests.xml
    paths:
      - security_tests.log

load_tests:
  stage: test
  image: loadimpact/k6
  script:
    - k6 run --vus 10 --duration 30s tests/load_test.js > load_tests.log
  artifacts:
    paths:
      - load_tests.log

debug_networks:
  stage: test
  services:
    - name: docker:dind  # ✅ Enable Docker-in-Docker
      command: ["--tls=false"]
  script:
    - echo "Checking Docker Networks..."
    - docker network ls  # ✅ List available networks
    - echo "Inspecting my_network..."
    - docker network inspect my_network || echo "Network does not exist"
  tags:
    - docker
  allow_failure: true  # ✅ Prevents pipeline from failing while debugging

