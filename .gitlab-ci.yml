image: docker:24.0.7  # Use a specific Docker image

variables:
  DOCKER_HOST: "unix:///var/run/docker.sock"  # Use socket mounting for Docker
  DOCKER_TLS_CERTDIR: ""  # Disable TLS to prevent authentication issues
  POSTGRES_DB: mydatabase  # Database name for PostgreSQL
  POSTGRES_USER: user  # Username for PostgreSQL
  POSTGRES_PASSWORD: password  # Password for PostgreSQL
  REDIS_HOST: redis  # Redis hostname
  DATABASE_URL: postgresql://user:password@db:5432/mydatabase  # Database connection URL
  COMPOSE_HTTP_TIMEOUT: 300  # Increase timeout for Docker Compose operations
  REGISTRY: https://registry.example.com/root/first_pipeline  # Docker registry URL
  IMAGE_NAME: first_pipeline  # Name of the Docker image to be built

stages:
  - build
  - test
  - deploy

before_script:
  - apk add --no-cache docker-compose  # Install Docker Compose
  - docker --version  # Verify Docker installation
  - docker-compose --version  # Verify Docker Compose installation
  - echo "Ensuring Docker is ready..."
  - sleep 5  # Allow time for Docker to initialize
  - docker info  # Debugging: Display Docker system info

build_job:
  stage: build
  services:
    - name: docker:dind
      command: ["--tls=false"]
  script:
    - apk add --no-cache curl
    - echo "Checking out the repository..."
    - ls -la  # Debugging: List all files to confirm presence of compose.yml
    - |
      if test -f compose.yml; then
        echo "‚úÖ compose.yml exists!";
      else
        echo "‚ùå ERROR: compose.yml is missing!";
        exit 1;
      fi
    - echo "Removing networks from compose.yml for build..."
    - sed '/networks:/,/my_network/d' compose.yml > compose.build.yml  # Remove networks from a copy
    - echo "Building the Docker images..."
    - docker-compose -f compose.build.yml build --no-cache  # Build images without using cache
  tags:
    - docker

test:
  image: docker:24.0.7
  stage: test
  services:
    - name: docker:dind
      command: ["--tls=false"]
    - name: postgres:15  # PostgreSQL service
      alias: db
    - name: redis:latest  # Redis service
      alias: redis
  variables:
    DOCKER_HOST: "tcp://docker:2375"  # Use TCP instead of a Unix socket
  before_script:
    - apk add --no-cache docker-compose curl
    - docker --version
    - docker-compose --version
  script:
    - echo "Starting Docker Compose services..."
    - docker-compose up -d
    - echo "Waiting for the web service to start..."
    - sleep 30  # Increase wait time
    - echo "Verifying web service is running..."
    - docker-compose ps  # Check container status
    - echo "Fetching web container logs..."
    - docker-compose logs web
    - echo "Testing web service..."
    - curl -v http://localhost:5000 || (echo "‚ùå Web service failed!" && exit 1)
  after_script:
    - echo "Stopping services..."
    - docker-compose down

debug_networks:
  stage: test
  services:
    - name: docker:dind
      command: ["--tls=false"]
  script:
    - echo "Checking Docker Networks..."
    - docker network ls  # List all available Docker networks
    - echo "Inspecting my_network..."
    - docker network inspect my_network || echo "‚ö†Ô∏è Network does not exist"
  tags:
    - docker
  allow_failure: true  # Prevent pipeline failure due to network debugging

deploy:
  image: docker:24.0.7
  stage: deploy
  only:
    - main
  variables:
    DOCKER_HOST: "unix:///var/run/docker.sock"  # ‚úÖ Use host Docker
  before_script:
    - apk add --no-cache docker-compose
    - docker --version
    - docker-compose --version
    - echo "Stopping any running containers on port 8000..."
    - docker ps -q --filter "publish=8000" | xargs -r docker stop || true

  script:
    - echo "Checking if image exists locally..."
    - docker images | grep $IMAGE_NAME || (echo "‚ùå Image not found locally, exiting deployment" && exit 1)
    - echo "üöÄ Deploying the container..."
    - docker-compose up -d
  tags:
    - docker
