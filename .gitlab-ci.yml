image: docker:24.0.7  # Use a specific Docker image

variables:
  DOCKER_HOST: "tcp://docker:2375"  # Correct Docker-in-Docker host
  DOCKER_TLS_CERTDIR: ""  # Disable TLS to prevent authentication issues
  COMPOSE_HTTP_TIMEOUT: 300  # Increase timeout for Docker Compose operations
  POSTGRES_DB: mydatabase
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password
  REDIS_HOST: redis
  DATABASE_URL: postgresql://user:password@db:5432/mydatabase
  REGISTRY: https://registry.example.com/root/first_pipeline
  IMAGE_NAME: first_pipeline

services:
  - name: docker:dind  # Start Docker-in-Docker
    command: ["--tls=false"]  # Disable TLS for easier connection

stages:
  - build
  - test
  - deploy

before_script:
  - echo "Ensuring Docker is ready..."
  - sleep 5  # Allow time for Docker to initialize
  - docker info  # Debugging: Display Docker system info

build_job:
  stage: build
  script:
    - echo "Checking out the repository..."
    - ls -la  # Debugging: List files to confirm presence of compose.yml
    - |
      if test -f compose.yml; then
        echo "compose.yml exists!";
      else
        echo "ERROR: compose.yml is missing!";
        exit 1;
      fi
    - echo "Removing networks from compose.yml for build..."
    - sed '/networks:/,/my_network/d' compose.yml > compose.build.yml
    - echo "Building the Docker images..."
    - docker build -t $IMAGE_NAME .  # Direct build instead of docker-compose
  tags:
    - docker  # Assign runner tag

test:
  stage: test
  script:
    - echo "Starting Docker Compose services..."
    - docker-compose -f compose.yml up -d  # Start containers in detached mode

    - echo "Waiting for the web service to start..."
    - sleep 20  # Allow time for services to initialize

    - echo "Testing web service from inside the container..."
    - docker-compose exec web curl -f http://localhost:5000 || (echo "Service not responding!" && exit 1)

    - echo "Fetching web container logs..."
    - docker-compose logs web
  after_script:
    - echo "Stopping services..."
    - docker-compose -f compose.yml down
  tags:
    - docker

deploy:
  stage: deploy
  only:
    - main  # Run this job only on the main branch
  script:
    - echo "Checking if image exists locally..."
    - docker images | grep $IMAGE_NAME || (echo "Image not found locally, exiting deployment" && exit 1)
    
    - echo "Stopping previous container..."
    - docker stop flask_app || true
    - docker rm flask_app || true
    
    - echo "Starting services with Docker Compose..."
    - docker-compose up -d
  tags:
    - docker
