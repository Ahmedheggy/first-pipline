image: docker:24.0.7

variables:
  DOCKER_HOST: unix:///var/run/docker.sock
  DOCKER_TLS_CERTDIR: ""
  IMAGE_NAME: first_pipeline
  CONTAINER_NAME: flask_app

stages:
  - build
  - test
  - deploy

before_script:
  - apk add --no-cache docker-compose
  - docker --version
  - docker-compose --version

build_job:
  stage: build
  script:
    # Secure Docker Hub login with token
    - echo "$DOCKER_TOKEN" | docker login -u "ahmedheggy" --password-stdin
    
    # Build and push the image
    - docker build -t ahmedheggy/$IMAGE_NAME:$CI_COMMIT_SHA .
    - docker push ahmedheggy/$IMAGE_NAME:$CI_COMMIT_SHA
    
    # Also tag as 'latest' (optional)
    - docker tag ahmedheggy/$IMAGE_NAME:$CI_COMMIT_SHA ahmedheggy/$IMAGE_NAME:latest
    - docker push ahmedheggy/$IMAGE_NAME:latest
  tags:
    - docker

test:
  stage: test
  image: docker:24.0.7
  services:
    - docker:dind
  before_script:
    - apk add --no-cache docker-compose curl
    - docker --version
    - docker-compose --version
  script:
    - echo "Starting Docker Compose services..."
    - docker-compose up -d
    - echo "Waiting for the web service to start..."
    - sleep 20
    - echo "Testing web service from inside the container..."
    - docker-compose exec web curl http://localhost:5000
    - echo "Fetching web container logs..."
    - docker logs first_pipeline-web-1
  after_script:
    - echo "Stopping services..."
    - docker-compose down
  tags:
    - docker

deploy:
  stage: deploy
  only:
    - main
  script:
    # Install required tools
    - apk add --no-cache bash coreutils
    
    # Docker Hub login
    - echo "$DOCKER_TOKEN" | docker login -u "ahmedheggy" --password-stdin
    
    # Pull the specific version and latest from Docker Hub
    - docker pull ahmedheggy/$IMAGE_NAME:$CI_COMMIT_SHA
    - docker pull ahmedheggy/$IMAGE_NAME:latest || true  # Continue if latest doesn't exist
    
    # Tag the specific version as latest
    - docker tag ahmedheggy/$IMAGE_NAME:$CI_COMMIT_SHA ahmedheggy/$IMAGE_NAME:latest
    
    # Clean up previous deployment
    - docker-compose down --remove-orphans || true
    
    # Deploy with compose using the pulled image
    - TAG=$CI_COMMIT_SHA docker-compose up -d
    
    # Wait for services to be healthy (simplified)
    - for i in {1..12}; do
        docker-compose ps | grep -q "healthy" && break;
        sleep 5;
      done
    
    # Verify deployment
    - docker-compose ps
    - docker-compose logs --tail=50
  tags:
    - docker