image: docker:24.0.7  # Use a Docker image

variables:
  DOCKER_HOST: unix:///var/run/docker.sock  # Use socket mounting
  DOCKER_TLS_CERTDIR: ""  # Disable TLS to prevent authentication issues
  POSTGRES_DB: mydatabase
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password
  REDIS_HOST: redis
  DATABASE_URL: postgresql://user:password@db:5432/mydatabase
  COMPOSE_HTTP_TIMEOUT: 300  # Avoid timeout issues
  REGISTRY: https://registry.example.com/root/first_pipeline
  IMAGE_NAME: first_pipeline

stages:
  - build
  - test
  - deploy

before_script:
  - apk add --no-cache docker-compose  # Install docker-compose
  - docker --version  # Verify Docker installation
  - docker-compose --version  # Verify docker-compose installation
  - echo "Ensuring Docker is ready..."
  - sleep 5  # Give Docker time to initialize
  - docker info  # Debug Docker status

build_job:
  stage: build
  services:
    - name: docker:dind  # ✅ Enable Docker-in-Docker
      command: ["--tls=false"]
  script:
    - apk add --no-cache curl
    - echo "Checking out the repository..."
    - ls -la  # ✅ Debug: List all files to verify `compose.yml` is present
    - |
      if test -f compose.yml; then
        echo "compose.yml exists!";
      else
        echo "ERROR: compose.yml is missing!";
        exit 1;
      fi
    - echo "Removing networks from compose.yml for build..."
    - sed '/networks:/,/my_network/d' compose.yml > compose.build.yml  # ✅ Remove networks from a copy
    - echo "Building the Docker images..."
    - docker-compose -f compose.build.yml build --no-cache
  tags:
    - docker


test:
  image: docker:24.0.7
  services:
    - docker:dind
  before_script:
    - apk add --no-cache docker-compose curl
    - docker --version
    - docker-compose --version
  script:
    - echo "Starting Docker Compose services..."
    - docker-compose up -d
    - echo "Waiting for the web service to start..."
    - sleep 20  # Increased wait time
    - echo "Testing web service from inside the container..."
    - docker-compose exec web curl http://localhost:5000
    - echo "Fetching web container logs..."
    - docker logs first_pipeline-web-1
  after_script:
    - echo "Stopping services..."
    - docker-compose down

debug_networks:
  stage: test
  services:
    - name: docker:dind  # ✅ Enable Docker-in-Docker
      command: ["--tls=false"]
  script:
    - echo "Checking Docker Networks..."
    - docker network ls  # ✅ List available networks
    - echo "Inspecting my_network..."
    - docker network inspect my_network || echo "Network does not exist"
  tags:
    - docker
  allow_failure: true  # ✅ Prevents pipeline from failing while debugging

deploy:
  stage: deploy
  only:
    - main
  before_script:
    - apk add --no-cache docker-compose
  script:
    - echo "Checking if image exists locally..."
    - docker images | grep $IMAGE_NAME || (echo "Image not found locally, exiting deployment" && exit 1)
    
    - echo "Stopping previous container..."
    - docker stop flask_app || true
    - docker rm flask_app || true
    
    - echo "Starting services with Docker Compose..."
    - docker-compose up -d  # Start containers

    - echo "Waiting for services to be healthy..."
    - sleep 10  # Adjust based on service startup time

    - echo "Verifying running containers..."
    - docker ps

