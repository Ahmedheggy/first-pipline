image: docker:24.0.7  # Use a specific Docker image

variables:
  DOCKER_HOST: unix:///var/run/docker.sock  # Use socket mounting for Docker
  DOCKER_TLS_CERTDIR: ""  # Disable TLS to prevent authentication issues
  POSTGRES_DB: mydatabase  # Database name for PostgreSQL
  POSTGRES_USER: user  # Username for PostgreSQL
  POSTGRES_PASSWORD: password  # Password for PostgreSQL
  REDIS_HOST: redis  # Redis hostname
  DATABASE_URL: postgresql://user:password@db:5432/mydatabase  # Database connection URL
  COMPOSE_HTTP_TIMEOUT: 300  # Increase timeout for Docker Compose operations
  REGISTRY: https://registry.example.com/root/first_pipeline  # Docker registry URL
  IMAGE_NAME: first_pipeline  # Name of the Docker image to be built

stages:
  - build  # First stage: Building the application
  - test  # Second stage: Testing the application
  - deploy  # Third stage: Deploying the application

before_script:
  - apk add --no-cache docker-compose  # Install Docker Compose
  - docker --version  # Verify Docker installation
  - docker-compose --version  # Verify Docker Compose installation
  - echo "Ensuring Docker is ready..."
  - sleep 5  # Allow time for Docker to initialize
  - docker info  # Debugging: Display Docker system info

build_job:
  stage: build
  services:
    - name: docker:dind
      command: ["--tls=false"]  # Disable TLS to prevent issues
  script:
    - apk add --no-cache curl jq docker-compose  # Install dependencies
    - echo "Checking out the repository..."
    - ls -la  # Debugging: List all files
    - |
      if test -f compose.yml; then
        echo "compose.yml exists!";
      else
        echo "ERROR: compose.yml is missing!";
        exit 1;
      fi
    - echo "Removing networks from compose.yml for build..."
    - sed '/networks:/,/my_network/d' compose.yml > compose.build.yml
    - echo "Logging into GitLab Container Registry..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - echo "Building and pushing Docker image..."
    - docker-compose -f compose.build.yml build --no-cache
    - docker tag $IMAGE_NAME "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  tags:
    - docker

test:
  image: docker:24.0.7
  services:
    - name: docker:dind
      command: ["--tls=false"]
  variables:
    DOCKER_HOST: tcp://docker:2375  # Use TCP instead of a Unix socket
  before_script:
    - apk add --no-cache docker-compose curl
    - docker --version
    - docker-compose --version
  script:
  - echo "Starting Docker Compose services..."
  - docker-compose up -d
  - echo "Waiting for the web service to start..."
  - sleep 30  # Increase wait time
  - echo "Verifying web service is running..."
  - docker-compose ps  # Check container status
  - echo "Fetching web container logs..."
  - docker-compose logs web
  - echo "Testing web service..."
  - docker-compose exec web curl -v http://0.0.0.0:5000
  after_script:
    - echo "Stopping services..."
    - docker-compose down

debug_networks:
  stage: test  # Assign job to the test stage
  services:
    - name: docker:dind  # Enable Docker-in-Docker
      command: ["--tls=false"]  # Disable TLS
  script:
    - echo "Checking Docker Networks..."
    - docker network ls  # List all available Docker networks
    - echo "Inspecting my_network..."
    - docker network inspect my_network || echo "Network does not exist"  # Check if specific network exists
  tags:
    - docker  # Assign runner tag
  allow_failure: true  # Prevent pipeline failure due to network debugging

deploy:
  image: docker:24.0.7
  stage: deploy
  only:
    - main  # Run this job only on the main branch
  services:
    - name: docker:dind
      command: ["--tls=false"]  # Disable TLS for Docker-in-Docker
  variables:
    DOCKER_HOST: "tcp://docker:2375"  # Use TCP connection
    DOCKER_TLS_CERTDIR: ""  # Disable TLS for easier communication
  before_script:
    - apk add --no-cache docker-compose jq  # Install dependencies
    - docker --version
    - docker-compose --version
    - echo "Logging into GitLab Container Registry..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - echo "Pulling the latest image..."
    - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - echo "Stopping existing containers..."
    - docker-compose down || echo "No running containers to stop"
    - echo "Updating compose.yml with the latest image..."
    - sed -i "s|image:.*|image:$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG|g" compose.yml
    - echo "Deploying the updated container..."
    - docker-compose up -d
    - echo "Verifying running containers..."
    - docker ps
  tags:
    - docker
