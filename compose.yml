services:
  web:
    build: .  # Build the web service from the Dockerfile in the current directory
    ports:
      - "8000:5000"  # Map host port 8000 to container port 5000
    networks:
      - my_network  # Connect the web service to the custom network
    depends_on:
      db:
        condition: service_healthy  # Ensure the database is healthy before starting
      redis:
        condition: service_healthy  # Ensure Redis is healthy before starting
    env_file:
      - .env  # Load environment variables from .env file

  db:
    image: postgres:latest  # Use the latest PostgreSQL image
    restart: always  # Restart container automatically on failure
    networks:
      - my_network  # Connect the database to the custom network
    env_file:
      - .env  # Load database credentials from .env file
    volumes:
      - db_data:/var/lib/postgresql/data  # Persist database data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]  # Check if the database is ready
      interval: 5s  # Run the health check every 5 seconds
      retries: 5  # Retry up to 5 times before marking as unhealthy
      start_period: 10s  # Initial delay before the first health check

  redis:
    image: redis:latest  # Use the latest Redis image
    restart: always  # Restart container automatically on failure
    networks:
      - my_network  # Connect Redis to the custom network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]  # Check if Redis is responsive
      interval: 5s  # Run the health check every 5 seconds
      retries: 5  # Retry up to 5 times before marking as unhealthy
      start_period: 10s  # Initial delay before the first health check   

volumes:
  db_data:  # Define a named volume for PostgreSQL data persistence

networks:
  my_network:  # Define a custom network for communication between services
